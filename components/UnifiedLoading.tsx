import React, { useEffect } from 'react';\n\n// 统一的加载动画样式（与ATM波动率期限结构保持一致）\nconst loadingStyles = `\n  @keyframes ai-spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n  @keyframes ai-pulse {\n    0%, 100% { opacity: 1; transform: scale(1); }\n    50% { opacity: 0.8; transform: scale(1.05); }\n  }\n  \n  @keyframes ai-bounce-delayed {\n    0%, 20%, 53%, 80%, 100% { transform: translate3d(0,0,0); }\n    40%, 43% { transform: translate3d(0,-8px,0); }\n    70% { transform: translate3d(0,-4px,0); }\n    90% { transform: translate3d(0,-2px,0); }\n  }\n  \n  .ai-spin { animation: ai-spin 2s linear infinite; }\n  .ai-pulse { animation: ai-pulse 2s ease-in-out infinite; }\n  .ai-bounce-delayed { animation: ai-bounce-delayed 1.4s ease-in-out infinite; }\n`;\n\ninterface UnifiedLoadingProps {\n  type?: 'standard' | 'chart' | 'small';\n  message?: string;\n  className?: string;\n}\n\n/**\n * 统一的加载动画组件\n * 与ATM波动率期限结构的加载动画保持一致\n */\nconst UnifiedLoading: React.FC<UnifiedLoadingProps> = ({\n  type = 'standard',\n  message = '加载中...',\n  className = ''\n}) => {\n  // 注入统一的动画样式\n  useEffect(() => {\n    const styleId = 'unified-loading-styles';\n    \n    // 检查是否已经注入过样式\n    if (!document.getElementById(styleId)) {\n      const style = document.createElement('style');\n      style.id = styleId;\n      style.textContent = loadingStyles;\n      document.head.appendChild(style);\n    }\n  }, []);\n\n  const getLoadingComponent = () => {\n    switch (type) {\n      case 'chart':\n        // 图表加载样式（用于图表容器）\n        return (\n          <div className={`h-96 flex items-center justify-center ${className}`}>\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full ai-spin\"></div>\n                <div className=\"w-6 h-6 border-2 border-green-500 border-t-transparent rounded-full ai-spin ml-2\" style={{ animationDelay: '0.2s' }}></div>\n                <div className=\"w-4 h-4 border-2 border-purple-500 border-t-transparent rounded-full ai-spin ml-2\" style={{ animationDelay: '0.4s' }}></div>\n              </div>\n              <div className=\"ai-pulse\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">{message}</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-500\">正在获取最新数据...</p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'small':\n        // 小型加载样式（用于按钮等）\n        return (\n          <div className={`flex items-center gap-1 text-xs text-theme-secondary ${className}`}>\n            <div className=\"w-3 h-3 border-2 border-blue-500 border-t-transparent rounded-full ai-spin\"></div>\n            <span className=\"ai-bounce-delayed\">{message}</span>\n          </div>\n        );\n\n      default:\n        // 标准加载样式\n        return (\n          <div className={`flex items-center justify-center ${className}`}>\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-3\">\n                <div className=\"w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full ai-spin\"></div>\n                <div className=\"w-5 h-5 border-2 border-green-500 border-t-transparent rounded-full ai-spin ml-1\" style={{ animationDelay: '0.15s' }}></div>\n                <div className=\"w-4 h-4 border-2 border-purple-500 border-t-transparent rounded-full ai-spin ml-1\" style={{ animationDelay: '0.3s' }}></div>\n              </div>\n              <div className=\"ai-pulse\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{message}</p>\n              </div>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return getLoadingComponent();\n};\n\nexport default UnifiedLoading;\n\n// 导出预设的加载组件变体\nexport const ChartLoading: React.FC<{ message?: string; className?: string }> = ({ \n  message = '加载图表中...', \n  className = '' \n}) => (\n  <UnifiedLoading type=\"chart\" message={message} className={className} />\n);\n\nexport const SmallLoading: React.FC<{ message?: string; className?: string }> = ({ \n  message = '更新中...', \n  className = '' \n}) => (\n  <UnifiedLoading type=\"small\" message={message} className={className} />\n);\n\nexport const StandardLoading: React.FC<{ message?: string; className?: string }> = ({ \n  message = '加载中...', \n  className = '' \n}) => (\n  <UnifiedLoading type=\"standard\" message={message} className={className} />\n);